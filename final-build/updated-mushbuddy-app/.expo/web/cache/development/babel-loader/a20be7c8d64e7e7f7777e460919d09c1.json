{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI } from \"../../utils/fetchData\";\nexport var register = function register(data) {\n  return function _callee(dispatch) {\n    var res;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch({\n              type: GLOBALTYPES.ALERT,\n              payload: {\n                loading: true\n              }\n            });\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(postDataAPI('auth/register', data));\n\n          case 4:\n            res = _context.sent;\n            dispatch({\n              type: GLOBALTYPES.AUTH,\n              payload: {\n                user: res.data.newuser\n              }\n            });\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: GLOBALTYPES.ALERT,\n              payload: {\n                error: _context.t0.response.data.msg\n              }\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/bibaswankhadka/CS98/project-mushbuddy/mushbuddy-app/redux/actions/authAction.js"],"names":["GLOBALTYPES","postDataAPI","register","data","dispatch","type","ALERT","payload","loading","res","AUTH","user","newuser","error","response","msg"],"mappings":";AAAA,SAASA,WAAT;AACA,SAASC,WAAT;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD;AAAA,SAAU,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1BA,YAAAA,QAAQ,CAAC;AAACC,cAAAA,IAAI,EAAEL,WAAW,CAACM,KAAnB;AAA0BC,cAAAA,OAAO,EAAE;AAACC,gBAAAA,OAAO,EAAE;AAAV;AAAnC,aAAD,CAAR;AAF0B;AAAA,6CAIRP,WAAW,CAAC,eAAD,EAAkBE,IAAlB,CAJH;;AAAA;AAIpBM,YAAAA,GAJoB;AAK1BL,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEL,WAAW,CAACU,IADb;AAELH,cAAAA,OAAO,EAAE;AACLI,gBAAAA,IAAI,EAAEF,GAAG,CAACN,IAAJ,CAASS;AADV;AAFJ,aAAD,CAAR;AAL0B;AAAA;;AAAA;AAAA;AAAA;AAY1BR,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEL,WAAW,CAACM,KADb;AAELC,cAAAA,OAAO,EAAE;AACLM,gBAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaX,IAAb,CAAkBY;AADpB;AAFJ,aAAD,CAAR;;AAZ0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAjB","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\nimport { postDataAPI } from '../../utils/fetchData'\n\nexport const register = (data) => async (dispatch) => {\n    try {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: true}})\n\n        const res = await postDataAPI('auth/register', data)\n        dispatch({ \n            type: GLOBALTYPES.AUTH, \n            payload: {\n                user: res.data.newuser\n            } \n        })\n    } catch (err) {\n        dispatch({ \n            type: GLOBALTYPES.ALERT, \n            payload: {\n                error: err.response.data.msg\n            } \n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}