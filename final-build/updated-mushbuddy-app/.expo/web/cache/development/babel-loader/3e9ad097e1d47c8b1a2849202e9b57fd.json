{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport { ButtonGroup } from 'react-native-elements';\nimport styles from \"../stylesheets/profile_styles/profile_style.js\";\nimport headerBackground from \"../../assets/profile_assets/header_background2.png\";\nimport defaultIcon from \"../../assets/profile_assets/icon_default.png\";\nimport Badges from \"./badges.js\";\nimport History from \"./history.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Profile = function (_Component) {\n  _inherits(Profile, _Component);\n\n  var _super = _createSuper(Profile);\n\n  function Profile(props) {\n    var _this;\n\n    _classCallCheck(this, Profile);\n\n    _this = _super.call(this, props);\n\n    _this.updateIndex = function (selectedIndex) {\n      _this.setState({\n        selectedIndex: selectedIndex\n      });\n    };\n\n    _this.getUserName = function () {\n      if (_this.props.user.user) {\n        return _this.props.user.user.username;\n      } else {\n        console.log(\"this.props.user.user temporarily unavaiable (still loading)\");\n      }\n    };\n\n    _this.renderProfileImage = function () {\n      return _jsx(View, {\n        style: styles.profileImageContainer,\n        children: _jsx(Image, {\n          source: defaultIcon,\n          style: styles.profileImage,\n          resizeMode: \"center\"\n        })\n      });\n    };\n\n    _this.renderUserName = function () {\n      return _jsx(Text, {\n        style: styles.headerText,\n        children: _this.getUserName()\n      });\n    };\n\n    _this.renderUserHandle = function () {\n      return _jsx(Text, {\n        style: styles.subheaderText,\n        children: \"@ aleks_ko\"\n      });\n    };\n\n    _this.renderUserLocation = function () {\n      return _jsxs(View, {\n        style: styles.locationLine,\n        children: [_jsx(Icon, {\n          name: \"location\",\n          size: 14,\n          color: \"#FFAA60\"\n        }), _jsx(Text, {\n          children: \" Portland, OR\"\n        })]\n      });\n    };\n\n    _this.renderProfileInfo = function () {\n      return _jsxs(View, {\n        style: styles.userInfoContainer,\n        children: [_this.renderUserName(), _this.renderUserHandle(), _this.renderUserLocation()]\n      });\n    };\n\n    _this.renderButtonGroup = function (buttonOptions) {\n      return _jsx(View, {\n        style: styles.buttonGroupContainer,\n        children: _jsx(ButtonGroup, {\n          onPress: _this.updateIndex,\n          selectedIndex: _this.state.selectedIndex,\n          buttons: buttonOptions,\n          textStyle: {\n            fontSize: 12,\n            color: '#BDBDBD'\n          },\n          containerStyle: {\n            width: '90%',\n            height: 30,\n            borderColor: 'transparent',\n            backgroundColor: 'transparent'\n          },\n          buttonContainerStyle: {\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderColor: 'transparent'\n          },\n          innerBorderStyle: {\n            color: '#BDBDBD'\n          },\n          selectedButtonStyle: {\n            backgroundColor: 'transparent'\n          },\n          selectedTextStyle: {\n            color: '#6C6C6C',\n            fontWeight: 'bold'\n          }\n        })\n      });\n    };\n\n    _this.renderSubComponent = function () {\n      if (_this.state.selectedIndex === 0) {\n        return _jsx(Badges, {});\n      } else {\n        return _jsx(History, {});\n      }\n    };\n\n    _this.state = {\n      selectedIndex: 0\n    };\n    _this.updateIndex = _this.updateIndex.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Profile, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getUserByID();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var buttons = ['Badges', 'History'];\n      return _jsx(SafeAreaView, {\n        style: styles.container,\n        children: _jsxs(ScrollView, {\n          showsVerticalScrollIndicator: false,\n          children: [_jsx(View, {\n            style: styles.upperContainer,\n            children: _jsxs(ImageBackground, {\n              source: headerBackground,\n              resizeMode: \"stretch\",\n              style: styles.headerBackgroundImage,\n              children: [_jsx(View, {\n                style: styles.upperNavigation,\n                children: _jsx(Icon, {\n                  name: \"cog\",\n                  size: 24,\n                  color: \"white\"\n                })\n              }), _jsxs(View, {\n                style: styles.profileStripContainer,\n                children: [this.renderProfileImage(), this.renderProfileInfo()]\n              })]\n            })\n          }), this.renderButtonGroup(buttons), this.renderSubComponent()]\n        })\n      });\n    }\n  }]);\n\n  return Profile;\n}(Component);\n\nexport default Profile;","map":{"version":3,"sources":["/Users/bibaswankhadka/CS98/project-mushbuddy/mushbuddy-app/components/profile_components/profile.js"],"names":["React","Component","connect","Icon","ButtonGroup","styles","headerBackground","defaultIcon","Badges","History","Profile","props","updateIndex","selectedIndex","setState","getUserName","user","username","console","log","renderProfileImage","profileImageContainer","profileImage","renderUserName","headerText","renderUserHandle","subheaderText","renderUserLocation","locationLine","renderProfileInfo","userInfoContainer","renderButtonGroup","buttonOptions","buttonGroupContainer","state","fontSize","color","width","height","borderColor","backgroundColor","justifyContent","alignItems","fontWeight","renderSubComponent","bind","getUserByID","buttons","container","upperContainer","headerBackgroundImage","upperNavigation","profileStripContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// import { getUserByID } from '../../actions';\n\nimport { View, Text, TouchableOpacity, SafeAreaView, Image, ImageBackground, ScrollView } from 'react-native';\nimport Icon from 'react-native-vector-icons/Ionicons';\n\nimport { ButtonGroup } from 'react-native-elements';\n\nimport styles from '../stylesheets/profile_styles/profile_style.js';\n\nimport headerBackground from '../../assets/profile_assets/header_background2.png';\nimport defaultIcon from '../../assets/profile_assets/icon_default.png';\n\nimport Badges from './badges.js';\nimport History from './history.js';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedIndex: 0\n    };\n    this.updateIndex = this.updateIndex.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getUserByID();\n  }\n\n  updateIndex = (selectedIndex) => {\n    this.setState({ selectedIndex });\n  }\n\n  getUserName = () => {\n    if (this.props.user.user) {\n      // console.log(\"can access this.props.user.user\");\n      // console.log(this.props.user.user.username);\n      return this.props.user.user.username;\n    }\n    else {\n      console.log(\"this.props.user.user temporarily unavaiable (still loading)\");\n    }\n  }\n\n  // Render methods\n\n  renderProfileImage = () => {\n    return (\n      <View style={styles.profileImageContainer}>\n        <Image\n          source={defaultIcon}\n          style={styles.profileImage}\n          resizeMode='center'\n        />\n      </View>\n    );\n  }\n\n  // Modular profile info renderers\n\n  renderUserName = () => {\n    return (\n      <Text style={styles.headerText}>\n        {this.getUserName()}\n        {/* Aleskander Zitko */}\n      </Text>\n    );\n  }\n\n  renderUserHandle = () => {\n    return (\n      <Text style={styles.subheaderText}>\n        @ aleks_ko\n      </Text>\n    );\n  }\n\n  renderUserLocation = () => {\n    return (\n      <View style={styles.locationLine}>\n        <Icon name='location' size={14} color='#FFAA60' />\n        <Text> Portland, OR</Text>\n      </View>\n    );\n  }\n\n  renderProfileInfo = () => {\n    return (\n      <View style={styles.userInfoContainer}>\n        {this.renderUserName()}\n        {this.renderUserHandle()}\n        {this.renderUserLocation()}\n      </View>\n    );\n  }\n\n  renderButtonGroup = (buttonOptions) => {\n    return (\n      <View style={styles.buttonGroupContainer}>\n        <ButtonGroup\n          onPress={this.updateIndex}\n          selectedIndex={this.state.selectedIndex}\n          buttons={buttonOptions}\n          textStyle={{\n            fontSize: 12,\n            color: '#BDBDBD',\n          }}\n          containerStyle={{\n            width: '90%',\n            height: 30,\n            borderColor: 'transparent',\n            backgroundColor: 'transparent',\n          }}\n          buttonContainerStyle={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderColor: 'transparent',\n          }}\n          innerBorderStyle={{ color: '#BDBDBD' }}\n          selectedButtonStyle={{\n            backgroundColor: 'transparent',\n          }}\n          selectedTextStyle={{ color: '#6C6C6C', fontWeight: 'bold' }}\n        />\n      </View>\n    );\n  }\n\n  renderSubComponent = () => {\n    if (this.state.selectedIndex === 0) {\n      return (\n        <Badges />\n      );\n    } else {\n      return (\n        <History />\n      );\n    }\n  }\n\n  render() {\n    const buttons = ['Badges', 'History'];\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <ScrollView showsVerticalScrollIndicator={false}>\n\n          <View style={styles.upperContainer}>\n            <ImageBackground source={headerBackground} resizeMode=\"stretch\" style={styles.headerBackgroundImage}>\n\n              <View style={styles.upperNavigation}>\n                {/* <Icon name='arrow-back' size={24} color='white' /> */}\n                <Icon name='cog' size={24} color='white' />\n              </View>\n\n              <View style={styles.profileStripContainer}>\n                {this.renderProfileImage()}\n                {this.renderProfileInfo()}\n              </View>\n\n            </ImageBackground>\n          </View>\n\n          {this.renderButtonGroup(buttons)}\n          {this.renderSubComponent()}\n\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n}\n\n/*\nconst mapStateToProps = (reduxState) => ({\n  user: reduxState.user.userObject,\n});\n\nexport default connect(mapStateToProps, {\n  getUserByID,\n})(Profile);\n*/\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}